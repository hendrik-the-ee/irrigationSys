import Mixin from '@ember/object/mixin';
import RSVP from 'rsvp';
import DS from 'ember-data';
import Mix from '@ember/polyfills/types';
import { PlainObject, PlainHeaders, Method, FetchOptions, Nullable } from 'ember-fetch/types';
/**
 * Helper function to create a plain object from the response's Headers.
 * Consumed by the adapter's `handleResponse`.
 */
export declare function headersToObject(headers: Headers): PlainObject<string>;
export interface FetchAdapter {
    headers: undefined | PlainHeaders;
    init(): void;
    ajaxOptions(url: string, type: Method, options: object): FetchOptions;
    ajax(url: string, type: Method, options: object): RSVP.Promise<void>;
    _ajaxRequest(options: Mix<RequestInit, {
        url: string;
    }>): RSVP.Promise<Response>;
    _fetchRequest(url: string, options: RequestInit): RSVP.Promise<Response>;
    ajaxSuccess(adapter: DS.RESTAdapter, response: Response, payload: Nullable<string | object>, requestData: {
        url: string;
        method: string;
    }): object | DS.AdapterError | RSVP.Promise<void>;
    parseFetchResponseForError(response: Response, payload: Nullable<object | string>): object | string;
    ajaxError(adapter: any, response: Response, payload: Nullable<string | object>, requestData: object, error?: Error): Error | object | DS.AdapterError;
}
declare const _default: Mixin<FetchAdapter, DS.RESTAdapter>;
export default _default;
