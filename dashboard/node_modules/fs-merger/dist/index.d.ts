/// <reference types="node" />
import { InputNode } from 'broccoli-node-api';
import { readFileSync, existsSync, lstatSync, statSync, readdirSync, readdir } from 'fs';
import { entries, Options, Entry } from 'walk-sync';
declare class FSMerger {
    _dirList: FSMerger.Node[];
    MAP: {
        [key: string]: FSMerger.FSMergerObject;
    } | null;
    PREFIXINDEXMAP: {
        [key: number]: FSMerger.FSMergerObject;
    };
    _atList: FSMerger[];
    fs: FSMerger.FS;
    constructor(trees: FSMerger.Node[] | FSMerger.Node);
    readFileSync(filePath: string, options?: {
        encoding?: string | null;
        flag?: string;
    } | string | null): FSMerger.FileContent | undefined;
    at(index: number): FSMerger;
    _generateMap(): void;
    readFileMeta(filePath: string, options?: FSMerger.FileMetaOption): FSMerger.FileMeta | undefined;
    readdirSync(dirPath: string, options?: {
        encoding?: string | null;
        withFileTypes?: false;
    } | string | null): string[] | Buffer[];
    readdir(dirPath: string, options: {
        encoding?: string | null;
        withFileTypes?: false;
    } | string | undefined | null, callback: (err: NodeJS.ErrnoException | null, files: string[] | Buffer[]) => void): void;
    entries(dirPath?: string, options?: Options): Entry[];
}
export = FSMerger;
declare namespace FSMerger {
    export interface FS extends FSMerger {
        existsSync: typeof existsSync;
        lstatSync: typeof lstatSync;
        statSync: typeof statSync;
    }
    export type FSMergerObject = {
        root: string;
        prefix: string | undefined;
        getDestinationPath: Function | undefined;
    };
    export type FileContent = string | Buffer | null;
    export type FileMeta = {
        path: string;
        prefix: string | undefined;
        getDestinationPath: Function | undefined;
    };
    export type FileMetaOption = {
        basePath: string;
    };
    export type Node = FSMergerObject | InputNode;
    interface FSMerger {
        readFileSync: typeof readFileSync;
        readdirSync: typeof readdirSync;
        readdir: typeof readdir;
        at(index: number): FSMerger;
        readFileMeta(filePath: string, options: FileMetaOption): FileMeta;
        entries: typeof entries;
    }
    export {};
}
