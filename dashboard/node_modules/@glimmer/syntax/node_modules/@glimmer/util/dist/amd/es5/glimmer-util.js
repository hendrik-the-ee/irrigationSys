define('@glimmer/util', ['exports', '@glimmer/env'], function (exports, env) { 'use strict';

  var EMPTY_ARRAY = Object.freeze([]);

  // import Logger from './logger';
  // let alreadyWarned = false;
  function debugAssert(test, msg) {
    // if (!alreadyWarned) {
    //   alreadyWarned = true;
    //   Logger.warn("Don't leave debug assertions on in public builds");
    // }
    if (!test) {
      throw new Error(msg || 'assertion failure');
    }
  }
  function deprecate(desc) {
    console.warn("DEPRECATION: " + desc);
  }

  var GUID = 0;
  function initializeGuid(object) {
    return object._guid = ++GUID;
  }
  function ensureGuid(object) {
    return object._guid || initializeGuid(object);
  }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }
  function dict() {
    return Object.create(null);
  }
  function isDict(u) {
    return u !== null && u !== undefined;
  }
  function isObject(u) {
    return typeof u === 'object' && u !== null;
  }
  var DictSet =
  /*#__PURE__*/
  function () {
    function DictSet() {
      this.dict = dict();
    }

    var _proto = DictSet.prototype;

    _proto.add = function add(obj) {
      if (typeof obj === 'string') this.dict[obj] = obj;else this.dict[ensureGuid(obj)] = obj;
      return this;
    };

    _proto["delete"] = function _delete(obj) {
      if (typeof obj === 'string') delete this.dict[obj];else if (obj._guid) delete this.dict[obj._guid];
    };

    return DictSet;
  }();
  var StackImpl =
  /*#__PURE__*/
  function () {
    function StackImpl() {
      this.stack = [];
      this.current = null;
    }

    var _proto2 = StackImpl.prototype;

    _proto2.push = function push(item) {
      this.current = item;
      this.stack.push(item);
    };

    _proto2.pop = function pop() {
      var item = this.stack.pop();
      var len = this.stack.length;
      this.current = len === 0 ? null : this.stack[len - 1];
      return item === undefined ? null : item;
    };

    _proto2.nth = function nth(from) {
      var len = this.stack.length;
      return len < from ? null : this.stack[len - from];
    };

    _proto2.isEmpty = function isEmpty() {
      return this.stack.length === 0;
    };

    _proto2.toArray = function toArray() {
      return this.stack;
    };

    _createClass(StackImpl, [{
      key: "size",
      get: function get() {
        return this.stack.length;
      }
    }]);

    return StackImpl;
  }();

  function keys(obj) {
    return Object.keys(obj);
  }
  function unwrap(val) {
    if (val === null || val === undefined) throw new Error("Expected value to be present");
    return val;
  }
  function expect(val, message) {
    if (val === null || val === undefined) throw new Error(message);
    return val;
  }
  function unreachable(message) {
    if (message === void 0) {
      message = 'unreachable';
    }

    return new Error(message);
  }
  function exhausted(value) {
    throw new Error("Exhausted " + value);
  }
  var tuple = function tuple() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return args;
  };
  var symbol = typeof Symbol !== 'undefined' ? Symbol : function (key) {
    return "__" + key + Math.floor(Math.random() * Date.now()) + "__";
  };

  var DESTROY = symbol('DESTROY');
  function isDestroyable(value) {
    return !!(value && value[DESTROY] !== undefined);
  }
  function isStringDestroyable(value) {
    return !!(value && typeof value === 'object' && typeof value.destroy === 'function');
  }

  function clearElement(parent) {
    var current = parent.firstChild;

    while (current) {
      var next = current.nextSibling;
      parent.removeChild(current);
      current = next;
    }
  }

  var SERIALIZATION_FIRST_NODE_STRING = '%+b:0%';
  function isSerializationFirstNode(node) {
    return node.nodeValue === SERIALIZATION_FIRST_NODE_STRING;
  }

  function _defineProperties$1(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass$1(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$1(Constructor.prototype, protoProps); if (staticProps) _defineProperties$1(Constructor, staticProps); return Constructor; }
  var LINKED = new WeakMap();
  var WILL_DROP = symbol('WILL_DROP');
  var DID_DROP = symbol('DID_DROP');
  var CHILDREN = symbol('CHILDREN');
  var DESTRUCTORS = new WeakMap();
  function isDrop(value) {
    if (value === null || typeof value !== 'object') return false;
    return value[DID_DROP] !== undefined;
  }
  function associate(parent, child) {
    associateDestructor(parent, destructor(child));
  }
  function associateDestructor(parent, child) {
    var associated = LINKED.get(parent);

    if (!associated) {
      associated = new Set();
      LINKED.set(parent, associated);
    }

    associated.add(child);
  }
  function peekAssociated(parent) {
    return LINKED.get(parent) || null;
  }
  function takeAssociated(parent) {
    var linked = LINKED.get(parent);

    if (linked && linked.size > 0) {
      LINKED["delete"](parent);
      return linked;
    } else {
      return null;
    }
  }
  function willDestroyAssociated(parent) {
    var associated = LINKED.get(parent);

    if (associated) {
      associated.forEach(function (item) {
        item[WILL_DROP]();
      });
    }
  }
  function didDestroyAssociated(parent) {
    var associated = LINKED.get(parent);

    if (associated) {
      associated.forEach(function (item) {
        item[DID_DROP]();
        associated["delete"](item);
      });
    }
  }
  function destructor(value) {
    var d = DESTRUCTORS.get(value);

    if (!d) {
      if (isDestroyable(value)) {
        d = new DestroyableDestructor(value);
      } else if (isStringDestroyable(value)) {
        d = new StringDestroyableDestructor(value);
      } else {
        d = new SimpleDestructor(value);
      }

      DESTRUCTORS.set(value, d);
    }

    return d;
  }
  function snapshot(values) {
    return new SnapshotDestructor(values);
  }

  var SnapshotDestructor =
  /*#__PURE__*/
  function () {
    function SnapshotDestructor(destructors) {
      this.destructors = destructors;
    }

    var _proto = SnapshotDestructor.prototype;

    _proto[WILL_DROP] = function () {
      this.destructors.forEach(function (item) {
        return item[WILL_DROP]();
      });
    };

    _proto[DID_DROP] = function () {
      this.destructors.forEach(function (item) {
        return item[DID_DROP]();
      });
    };

    _proto.toString = function toString() {
      return 'SnapshotDestructor';
    };

    _createClass$1(SnapshotDestructor, [{
      key: CHILDREN,
      get: function get() {
        return this.destructors;
      }
    }]);

    return SnapshotDestructor;
  }();

  var DestroyableDestructor =
  /*#__PURE__*/
  function () {
    function DestroyableDestructor(inner) {
      this.inner = inner;
    }

    var _proto2 = DestroyableDestructor.prototype;

    _proto2[WILL_DROP] = function () {
      willDestroyAssociated(this.inner);
    };

    _proto2[DID_DROP] = function () {
      this.inner[DESTROY]();
      didDestroyAssociated(this.inner);
    };

    _proto2.toString = function toString() {
      return 'DestroyableDestructor';
    };

    _createClass$1(DestroyableDestructor, [{
      key: CHILDREN,
      get: function get() {
        return LINKED.get(this.inner) || [];
      }
    }]);

    return DestroyableDestructor;
  }();

  var StringDestroyableDestructor =
  /*#__PURE__*/
  function () {
    function StringDestroyableDestructor(inner) {
      this.inner = inner;
    }

    var _proto3 = StringDestroyableDestructor.prototype;

    _proto3[WILL_DROP] = function () {
      if (typeof this.inner.willDestroy === 'function') {
        this.inner.willDestroy();
      }

      willDestroyAssociated(this.inner);
    };

    _proto3[DID_DROP] = function () {
      this.inner.destroy();
      didDestroyAssociated(this.inner);
    };

    _proto3.toString = function toString() {
      return 'StringDestroyableDestructor';
    };

    _createClass$1(StringDestroyableDestructor, [{
      key: CHILDREN,
      get: function get() {
        return LINKED.get(this.inner) || [];
      }
    }]);

    return StringDestroyableDestructor;
  }();

  var SimpleDestructor =
  /*#__PURE__*/
  function () {
    function SimpleDestructor(inner) {
      this.inner = inner;
    }

    var _proto4 = SimpleDestructor.prototype;

    _proto4[WILL_DROP] = function () {
      willDestroyAssociated(this.inner);
    };

    _proto4[DID_DROP] = function () {
      didDestroyAssociated(this.inner);
    };

    _proto4.toString = function toString() {
      return 'SimpleDestructor';
    };

    _createClass$1(SimpleDestructor, [{
      key: CHILDREN,
      get: function get() {
        return LINKED.get(this.inner) || [];
      }
    }]);

    return SimpleDestructor;
  }();

  var ListContentsDestructor =
  /*#__PURE__*/
  function () {
    function ListContentsDestructor(inner) {
      this.inner = inner;
    }

    var _proto5 = ListContentsDestructor.prototype;

    _proto5[WILL_DROP] = function () {
      this.inner.forEachNode(function (d) {
        return destructor(d)[WILL_DROP]();
      });
    };

    _proto5[DID_DROP] = function () {
      this.inner.forEachNode(function (d) {
        return destructor(d)[DID_DROP]();
      });
    };

    _proto5.toString = function toString() {
      return 'ListContentsDestructor';
    };

    _createClass$1(ListContentsDestructor, [{
      key: CHILDREN,
      get: function get() {
        var out = [];
        this.inner.forEachNode(function (d) {
          return out.push.apply(out, destructor(d)[CHILDREN]);
        });
        return out;
      }
    }]);

    return ListContentsDestructor;
  }();
  function debugDropTree(inner) {
    var hasDrop = isDrop(inner);
    var rawChildren = LINKED.get(inner) || null;
    var children = null;

    if (rawChildren) {
      children = [];

      for (var _iterator = rawChildren, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var child = _ref;
        children.push(debugDropTree(child));
      }
    }

    var obj = Object.create(null);
    obj.inner = inner;

    if (children) {
      obj.children = children;
    }

    obj.hasDrop = hasDrop;
    return obj;
  }
  function printDropTree(inner) {
    printDrop(destructor(inner));
  }
  function printDrop(inner) {
    console.group(String(inner));
    console.log(inner);
    var children = inner[CHILDREN] || null;

    if (children) {
      for (var _iterator2 = children, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var child = _ref2;
        printDrop(child);
      }
    }

    console.groupEnd();
  }

  function _defineProperties$2(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass$2(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$2(Constructor.prototype, protoProps); if (staticProps) _defineProperties$2(Constructor, staticProps); return Constructor; }
  var ListNode = function ListNode(value) {
    this.next = null;
    this.prev = null;
    this.value = value;
  };
  var LinkedList =
  /*#__PURE__*/
  function () {
    function LinkedList() {
      this.clear();
    }

    var _proto = LinkedList.prototype;

    _proto.head = function head() {
      return this._head;
    };

    _proto.tail = function tail() {
      return this._tail;
    };

    _proto.clear = function clear() {
      this._head = this._tail = null;
    };

    _proto.toArray = function toArray() {
      var out = [];
      this.forEachNode(function (n) {
        return out.push(n);
      });
      return out;
    };

    _proto.nextNode = function nextNode(node) {
      return node.next;
    };

    _proto.forEachNode = function forEachNode(callback) {
      var node = this._head;

      while (node !== null) {
        callback(node);
        node = node.next;
      }
    };

    _proto.insertBefore = function insertBefore(node, reference) {
      if (reference === void 0) {
        reference = null;
      }

      if (reference === null) return this.append(node);
      if (reference.prev) reference.prev.next = node;else this._head = node;
      node.prev = reference.prev;
      node.next = reference;
      reference.prev = node;
      return node;
    };

    _proto.append = function append(node) {
      var tail = this._tail;

      if (tail) {
        tail.next = node;
        node.prev = tail;
        node.next = null;
      } else {
        this._head = node;
      }

      return this._tail = node;
    };

    _proto.remove = function remove(node) {
      if (node.prev) node.prev.next = node.next;else this._head = node.next;
      if (node.next) node.next.prev = node.prev;else this._tail = node.prev;
      return node;
    };

    _proto[WILL_DROP] = function () {
      this.forEachNode(function (d) {
        return destructor(d)[WILL_DROP]();
      });
    };

    _proto[DID_DROP] = function () {
      this.forEachNode(function (d) {
        return destructor(d)[DID_DROP]();
      });
    };

    _createClass$2(LinkedList, [{
      key: CHILDREN,
      get: function get() {
        var out = [];
        this.forEachNode(function (d) {
          return out.push.apply(out, destructor(d)[CHILDREN]);
        });
        return out;
      }
    }]);

    return LinkedList;
  }();
  var ListSlice =
  /*#__PURE__*/
  function () {
    function ListSlice(head, tail) {
      this._head = head;
      this._tail = tail;
    }

    var _proto2 = ListSlice.prototype;

    _proto2.forEachNode = function forEachNode(callback) {
      var node = this._head;

      while (node !== null) {
        callback(node);
        node = this.nextNode(node);
      }
    };

    _proto2.head = function head() {
      return this._head;
    };

    _proto2.tail = function tail() {
      return this._tail;
    };

    _proto2.toArray = function toArray() {
      var out = [];
      this.forEachNode(function (n) {
        return out.push(n);
      });
      return out;
    };

    _proto2.nextNode = function nextNode(node) {
      if (node === this._tail) return null;
      return node.next;
    };

    return ListSlice;
  }();
  var EMPTY_SLICE = new ListSlice(null, null);

  var objKeys = Object.keys;
  function assign(obj) {
    for (var i = 1; i < arguments.length; i++) {
      var assignment = arguments[i];
      if (assignment === null || typeof assignment !== 'object') continue;
      var keys = objKeys(assignment);

      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        obj[key] = assignment[key];
      }
    }

    return obj;
  }
  function fillNulls(count) {
    var arr = new Array(count);

    for (var i = 0; i < count; i++) {
      arr[i] = null;
    }

    return arr;
  }
  function values(obj) {
    var vals = [];

    for (var key in obj) {
      vals.push(obj[key]);
    }

    return vals;
  }

  function strip(strings) {
    var out = '';

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    for (var i = 0; i < strings.length; i++) {
      var string = strings[i];
      var dynamic = args[i] !== undefined ? String(args[i]) : '';
      out += "" + string + dynamic;
    }

    var lines = out.split('\n');

    while (lines.length && lines[0].match(/^\s*$/)) {
      lines.shift();
    }

    while (lines.length && lines[lines.length - 1].match(/^\s*$/)) {
      lines.pop();
    }

    var min = Infinity;

    for (var _iterator = lines, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var line = _ref;
      var leading = line.match(/^\s*/)[0].length;
      min = Math.min(min, leading);
    }

    var stripped = [];

    for (var _iterator2 = lines, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var _line = _ref2;
      stripped.push(_line.slice(min));
    }

    return stripped.join('\n');
  }

  /**
   * Encodes a value that can be stored directly instead of being a handle.
   *
   * Immediates use the positive half of 32bits
   *
   * @param value - the value to be encoded.
   */


  function encodeImmediate(value) {
    if (typeof value === 'number') {
      // 1073741827 - (-1) == 1073741828
      // 1073741827 - (-1073741820) == 2147483647
      // positive it stays as is
      // 0 - 1073741823


      return value < 0 ? 1073741827
      /* NEGATIVE_BASE */
      - value : value;
    }

    if (value === false) {
      return 1073741824
      /* FALSE */
      ;
    }

    if (value === true) {
      return 1073741825
      /* TRUE */
      ;
    }

    if (value === null) {
      return 1073741826
      /* NULL */
      ;
    }

    if (value === undefined) {
      return 1073741827
      /* UNDEFINED */
      ;
    }

    return exhausted(value);
  }
  /**
   * Decodes an immediate into its value.
   *
   * @param value - the encoded immediate value
   */

  function decodeImmediate(value) {

    if (value > 1073741823
    /* MAX_INT */
    ) {
        switch (value) {
          case 1073741824
          /* FALSE */
          :
            return false;

          case 1073741825
          /* TRUE */
          :
            return true;

          case 1073741826
          /* NULL */
          :
            return null;

          case 1073741827
          /* UNDEFINED */
          :
            return undefined;

          default:
            // map 1073741828 to 2147483647 to -1 to -1073741820
            // 1073741827 - 1073741828 == -1
            // 1073741827 - 2147483647 == -1073741820
            return 1073741827
            /* NEGATIVE_BASE */
            - value;
        }
      }

    return value;
  }
  /**
   * True if the number can be stored directly or false if it needs a handle.
   *
   * This is used on any number type to see if it can be directly encoded.
   */

  function isSmallInt(num) {
    return isInt(num, -1073741820
    /* MIN_INT */
    , 1073741823
    /* MAX_INT */
    );
  }
  /**
   * True if the encoded int32 operand or encoded stack int32 is a handle.
   */

  function isHandle(encoded) {

    return encoded < 0;
  }
  /**
   * Encodes an index to an operand or stack handle.
   */

  function encodeHandle(index, maxIndex
  /* MAX_INDEX */
  , maxHandle
  /* MAX_HANDLE */
  ) {
    if (maxIndex === void 0) {
      maxIndex = 2147483647;
    }

    if (maxHandle === void 0) {
      maxHandle = -1;
    }

    if (index > maxIndex) {
      throw new Error("index " + index + " overflowed range 0 to " + maxIndex);
    } // -1 - 0 == -1
    // -1 - 1073741823 == -1073741824
    // -1073741825 - 0 == -1073741825
    // -1073741825 - 1073741823 == -2147483648


    return maxHandle - index;
  }
  /**
   * Decodes the index from the specified operand or stack handle.
   */

  function decodeHandle(handle, maxHandle
  /* MAX_HANDLE */
  ) {
    if (maxHandle === void 0) {
      maxHandle = -1;
    }
    // -1 - -1073741824 == 1073741823
    // -1073741825 - -1073741825 == 0
    // -1073741825 - -2147483648 == 1073741823


    return maxHandle - handle;
  }

  function isInt(num, min, max) {
    // this is the same as Math.floor(num) === num
    // also NaN % 1 is NaN and Infinity % 1 is NaN so both should fail
    return num % 1 === 0 && num >= min && num <= max;
  }

  function unwrapHandle(handle) {
    if (typeof handle === 'number') {
      return handle;
    } else {
      var error = handle.errors[0];
      throw new Error("Compile Error: " + error.problem + " @ " + error.span.start + ".." + error.span.end);
    }
  }
  function unwrapTemplate(template) {
    if (template.result === 'error') {
      throw new Error("Compile Error: " + template.problem + " @ " + template.span.start + ".." + template.span.end);
    }

    return template;
  }
  function extractHandle(handle) {
    if (typeof handle === 'number') {
      return handle;
    } else {
      return handle.handle;
    }
  }
  function isOkHandle(handle) {
    return typeof handle === 'number';
  }
  function isErrHandle(handle) {
    return typeof handle === 'number';
  }

  var debugToString;

  if (env.DEBUG) {
    var getFunctionName = function getFunctionName(fn) {
      var functionName = fn.name;

      if (functionName === undefined) {
        var match = Function.prototype.toString.call(fn).match(/function (\w+)\s*\(/);
        functionName = match && match[1] || '';
      }

      return functionName.replace(/^bound /, '');
    };

    var getObjectName = function getObjectName(obj) {
      var name;
      var className;

      if (obj.constructor && obj.constructor !== Object) {
        className = getFunctionName(obj.constructor);
      }

      if ('toString' in obj && obj.toString !== Object.prototype.toString && obj.toString !== Function.prototype.toString) {
        name = obj.toString();
      } // If the class has a decent looking name, and the `toString` is one of the
      // default Ember toStrings, replace the constructor portion of the toString
      // with the class name. We check the length of the class name to prevent doing
      // this when the value is minified.


      if (name && name.match(/<.*:ember\d+>/) && className && className[0] !== '_' && className.length > 2 && className !== 'Class') {
        return name.replace(/<.*:/, "<" + className + ":");
      }

      return name || className;
    };

    var getPrimitiveName = function getPrimitiveName(value) {
      return String(value);
    };

    debugToString = function debugToString(value) {
      if (typeof value === 'function') {
        return getFunctionName(value) || "(unknown function)";
      } else if (typeof value === 'object' && value !== null) {
        return getObjectName(value) || "(unknown object)";
      } else {
        return getPrimitiveName(value);
      }
    };
  }

  var debugToString$1 = debugToString;

  function assertNever(value, desc) {
    if (desc === void 0) {
      desc = 'unexpected unreachable branch';
    }

    console.log('unreachable', value);
    console.trace(desc + " :: " + JSON.stringify(value) + " (" + value + ")");
  }

  exports.CHILDREN = CHILDREN;
  exports.DESTROY = DESTROY;
  exports.DESTRUCTORS = DESTRUCTORS;
  exports.DID_DROP = DID_DROP;
  exports.DictSet = DictSet;
  exports.EMPTY_ARRAY = EMPTY_ARRAY;
  exports.EMPTY_SLICE = EMPTY_SLICE;
  exports.LINKED = LINKED;
  exports.LinkedList = LinkedList;
  exports.ListContentsDestructor = ListContentsDestructor;
  exports.ListNode = ListNode;
  exports.ListSlice = ListSlice;
  exports.SERIALIZATION_FIRST_NODE_STRING = SERIALIZATION_FIRST_NODE_STRING;
  exports.Stack = StackImpl;
  exports.WILL_DROP = WILL_DROP;
  exports.assert = debugAssert;
  exports.assertNever = assertNever;
  exports.assign = assign;
  exports.associate = associate;
  exports.associateDestructor = associateDestructor;
  exports.clearElement = clearElement;
  exports.debugDropTree = debugDropTree;
  exports.debugToString = debugToString$1;
  exports.decodeHandle = decodeHandle;
  exports.decodeImmediate = decodeImmediate;
  exports.deprecate = deprecate;
  exports.destructor = destructor;
  exports.dict = dict;
  exports.didDestroyAssociated = didDestroyAssociated;
  exports.encodeHandle = encodeHandle;
  exports.encodeImmediate = encodeImmediate;
  exports.ensureGuid = ensureGuid;
  exports.exhausted = exhausted;
  exports.expect = expect;
  exports.extractHandle = extractHandle;
  exports.fillNulls = fillNulls;
  exports.initializeGuid = initializeGuid;
  exports.isDestroyable = isDestroyable;
  exports.isDict = isDict;
  exports.isDrop = isDrop;
  exports.isErrHandle = isErrHandle;
  exports.isHandle = isHandle;
  exports.isObject = isObject;
  exports.isOkHandle = isOkHandle;
  exports.isSerializationFirstNode = isSerializationFirstNode;
  exports.isSmallInt = isSmallInt;
  exports.isStringDestroyable = isStringDestroyable;
  exports.keys = keys;
  exports.peekAssociated = peekAssociated;
  exports.printDrop = printDrop;
  exports.printDropTree = printDropTree;
  exports.snapshot = snapshot;
  exports.strip = strip;
  exports.symbol = symbol;
  exports.takeAssociated = takeAssociated;
  exports.tuple = tuple;
  exports.unreachable = unreachable;
  exports.unwrap = unwrap;
  exports.unwrapHandle = unwrapHandle;
  exports.unwrapTemplate = unwrapTemplate;
  exports.values = values;
  exports.willDestroyAssociated = willDestroyAssociated;

  Object.defineProperty(exports, '__esModule', { value: true });

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
