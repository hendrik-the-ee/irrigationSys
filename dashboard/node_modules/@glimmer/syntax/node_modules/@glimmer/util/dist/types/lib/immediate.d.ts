/**
 * Immediates use the positive half of 32 bits 0 through 2147483647 (0x7fffffff)
 * leaving the negative half for handles -1 through -2147483648.
 */
export declare const enum ImmediateConstants {
    /**
     * 31 bits can encode 2^31 values
     */
    IMMEDIATE_LENGTH = 2147483648,
    /**
     * Min encoded immediate is min positive
     */
    MIN_IMMEDIATE = 0,
    /**
     * Max encoded immediate is the max positive 32 bit signed int
     */
    MAX_IMMEDIATE = 2147483647,
    /**
     * The encoding of false.
     * False is the start of the second half of 31 bits
     */
    FALSE = 1073741824,
    /**
     * The maximum int that can be directly encoded vs a handle.
     *
     * The last positive int is just before FALSE.
     */
    MAX_INT = 1073741823,
    /**
     * The encoding of true
     */
    TRUE = 1073741825,
    /**
     * The encoding of null
     */
    NULL = 1073741826,
    /**
     * The encoding of undefined
     */
    UNDEFINED = 1073741827,
    /**
     * Encoded -1
     *
     * Encoded just after UNDEFINED
     */
    NEGATIVE_ONE = 1073741828,
    /**
     * The base to substract a negative from to decode or encode it.
     *
     * NEGATIVE_ONE      == NEGATIVE_BASE - -1             == encodeImmediate(-1)
     * MAX_IMMEDIATE     == NEGATIVE_BASE - MIN_INT        == encodeImmediate(MIN_INT)
     * -1                == NEGATIVE_BASE - NEGATIVE_ONE   == decodeImmediate(NEGATIVE_ONE)
     * MIN_INT           == NEGATIVE_BASE - MAX_IMMEDIATE  == decodeImmediate(MAX_IMMEDIATE)
     */
    NEGATIVE_BASE = 1073741827,
    /**
     * The minimum int that can be directly encoded vs a handle.
     */
    MIN_INT = -1073741820
}
/**
 * The compiler constants divide the handles into two halves strings and numbers
 * while on the stack, there is only one array of js values.
 */
export declare const enum HandleConstants {
    HANDLE_LENGTH = 2147483648,
    MAX_INDEX = 2147483647,
    MAX_HANDLE = -1,
    MIN_HANDLE = -2147483648,
    STRING_HANDLE_LENGTH = 1073741824,
    NUMBER_HANDLE_LENGTH = 1073741824,
    STRING_MAX_INDEX = 1073741823,
    NUMBER_MAX_INDEX = 1073741823,
    STRING_MAX_HANDLE = -1,
    STRING_MIN_HANDLE = -1073741824,
    NUMBER_MAX_HANDLE = -1073741825,
    NUMBER_MIN_HANDLE = -2147483648
}
/**
 * Encodes a value that can be stored directly instead of being a handle.
 *
 * Immediates use the positive half of 32bits
 *
 * @param value - the value to be encoded.
 */
export declare function encodeImmediate(value: null | undefined | boolean | number): number;
/**
 * Decodes an immediate into its value.
 *
 * @param value - the encoded immediate value
 */
export declare function decodeImmediate(value: number): null | undefined | boolean | number;
/**
 * True if the number can be stored directly or false if it needs a handle.
 *
 * This is used on any number type to see if it can be directly encoded.
 */
export declare function isSmallInt(num: number): boolean;
/**
 * True if the encoded int32 operand or encoded stack int32 is a handle.
 */
export declare function isHandle(encoded: number): boolean;
/**
 * Encodes an index to an operand or stack handle.
 */
export declare function encodeHandle(index: number, maxIndex?: number, maxHandle?: number): number;
/**
 * Decodes the index from the specified operand or stack handle.
 */
export declare function decodeHandle(handle: number, maxHandle?: number): number;
//# sourceMappingURL=immediate.d.ts.map