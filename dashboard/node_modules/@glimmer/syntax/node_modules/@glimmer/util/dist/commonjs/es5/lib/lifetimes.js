"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isDrop = isDrop;
exports.associate = associate;
exports.associateDestructor = associateDestructor;
exports.peekAssociated = peekAssociated;
exports.takeAssociated = takeAssociated;
exports.willDestroyAssociated = willDestroyAssociated;
exports.didDestroyAssociated = didDestroyAssociated;
exports.destructor = destructor;
exports.snapshot = snapshot;
exports.debugDropTree = debugDropTree;
exports.printDropTree = printDropTree;
exports.printDrop = printDrop;
exports.ListContentsDestructor = exports.DESTRUCTORS = exports.CHILDREN = exports.DID_DROP = exports.WILL_DROP = exports.LINKED = void 0;

var _destroy = require("./destroy");

var _platformUtils = require("./platform-utils");

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var LINKED = new WeakMap();
exports.LINKED = LINKED;
var WILL_DROP = (0, _platformUtils.symbol)('WILL_DROP');
exports.WILL_DROP = WILL_DROP;
var DID_DROP = (0, _platformUtils.symbol)('DID_DROP');
exports.DID_DROP = DID_DROP;
var CHILDREN = (0, _platformUtils.symbol)('CHILDREN');
exports.CHILDREN = CHILDREN;
var DESTRUCTORS = new WeakMap();
exports.DESTRUCTORS = DESTRUCTORS;

function isDrop(value) {
  if (value === null || typeof value !== 'object') return false;
  return value[DID_DROP] !== undefined;
}

function associate(parent, child) {
  associateDestructor(parent, destructor(child));
}

function associateDestructor(parent, child) {
  var associated = LINKED.get(parent);

  if (!associated) {
    associated = new Set();
    LINKED.set(parent, associated);
  }

  associated.add(child);
}

function peekAssociated(parent) {
  return LINKED.get(parent) || null;
}

function takeAssociated(parent) {
  var linked = LINKED.get(parent);

  if (linked && linked.size > 0) {
    LINKED["delete"](parent);
    return linked;
  } else {
    return null;
  }
}

function willDestroyAssociated(parent) {
  var associated = LINKED.get(parent);

  if (associated) {
    associated.forEach(function (item) {
      item[WILL_DROP]();
    });
  }
}

function didDestroyAssociated(parent) {
  var associated = LINKED.get(parent);

  if (associated) {
    associated.forEach(function (item) {
      item[DID_DROP]();
      associated["delete"](item);
    });
  }
}

function destructor(value) {
  var d = DESTRUCTORS.get(value);

  if (!d) {
    if ((0, _destroy.isDestroyable)(value)) {
      d = new DestroyableDestructor(value);
    } else if ((0, _destroy.isStringDestroyable)(value)) {
      d = new StringDestroyableDestructor(value);
    } else {
      d = new SimpleDestructor(value);
    }

    DESTRUCTORS.set(value, d);
  }

  return d;
}

function snapshot(values) {
  return new SnapshotDestructor(values);
}

var SnapshotDestructor =
/*#__PURE__*/
function () {
  function SnapshotDestructor(destructors) {
    this.destructors = destructors;
  }

  var _proto = SnapshotDestructor.prototype;

  _proto[WILL_DROP] = function () {
    this.destructors.forEach(function (item) {
      return item[WILL_DROP]();
    });
  };

  _proto[DID_DROP] = function () {
    this.destructors.forEach(function (item) {
      return item[DID_DROP]();
    });
  };

  _proto.toString = function toString() {
    return 'SnapshotDestructor';
  };

  _createClass(SnapshotDestructor, [{
    key: CHILDREN,
    get: function get() {
      return this.destructors;
    }
  }]);

  return SnapshotDestructor;
}();

var DestroyableDestructor =
/*#__PURE__*/
function () {
  function DestroyableDestructor(inner) {
    this.inner = inner;
  }

  var _proto2 = DestroyableDestructor.prototype;

  _proto2[WILL_DROP] = function () {
    willDestroyAssociated(this.inner);
  };

  _proto2[DID_DROP] = function () {
    this.inner[_destroy.DESTROY]();

    didDestroyAssociated(this.inner);
  };

  _proto2.toString = function toString() {
    return 'DestroyableDestructor';
  };

  _createClass(DestroyableDestructor, [{
    key: CHILDREN,
    get: function get() {
      return LINKED.get(this.inner) || [];
    }
  }]);

  return DestroyableDestructor;
}();

var StringDestroyableDestructor =
/*#__PURE__*/
function () {
  function StringDestroyableDestructor(inner) {
    this.inner = inner;
  }

  var _proto3 = StringDestroyableDestructor.prototype;

  _proto3[WILL_DROP] = function () {
    if (typeof this.inner.willDestroy === 'function') {
      this.inner.willDestroy();
    }

    willDestroyAssociated(this.inner);
  };

  _proto3[DID_DROP] = function () {
    this.inner.destroy();
    didDestroyAssociated(this.inner);
  };

  _proto3.toString = function toString() {
    return 'StringDestroyableDestructor';
  };

  _createClass(StringDestroyableDestructor, [{
    key: CHILDREN,
    get: function get() {
      return LINKED.get(this.inner) || [];
    }
  }]);

  return StringDestroyableDestructor;
}();

var SimpleDestructor =
/*#__PURE__*/
function () {
  function SimpleDestructor(inner) {
    this.inner = inner;
  }

  var _proto4 = SimpleDestructor.prototype;

  _proto4[WILL_DROP] = function () {
    willDestroyAssociated(this.inner);
  };

  _proto4[DID_DROP] = function () {
    didDestroyAssociated(this.inner);
  };

  _proto4.toString = function toString() {
    return 'SimpleDestructor';
  };

  _createClass(SimpleDestructor, [{
    key: CHILDREN,
    get: function get() {
      return LINKED.get(this.inner) || [];
    }
  }]);

  return SimpleDestructor;
}();

var ListContentsDestructor =
/*#__PURE__*/
function () {
  function ListContentsDestructor(inner) {
    this.inner = inner;
  }

  var _proto5 = ListContentsDestructor.prototype;

  _proto5[WILL_DROP] = function () {
    this.inner.forEachNode(function (d) {
      return destructor(d)[WILL_DROP]();
    });
  };

  _proto5[DID_DROP] = function () {
    this.inner.forEachNode(function (d) {
      return destructor(d)[DID_DROP]();
    });
  };

  _proto5.toString = function toString() {
    return 'ListContentsDestructor';
  };

  _createClass(ListContentsDestructor, [{
    key: CHILDREN,
    get: function get() {
      var out = [];
      this.inner.forEachNode(function (d) {
        return out.push.apply(out, destructor(d)[CHILDREN]);
      });
      return out;
    }
  }]);

  return ListContentsDestructor;
}();

exports.ListContentsDestructor = ListContentsDestructor;

function debugDropTree(inner) {
  var hasDrop = isDrop(inner);
  var rawChildren = LINKED.get(inner) || null;
  var children = null;

  if (rawChildren) {
    children = [];

    for (var _iterator = rawChildren, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var child = _ref;
      children.push(debugDropTree(child));
    }
  }

  var obj = Object.create(null);
  obj.inner = inner;

  if (children) {
    obj.children = children;
  }

  obj.hasDrop = hasDrop;
  return obj;
}

function printDropTree(inner) {
  printDrop(destructor(inner));
}

function printDrop(inner) {
  console.group(String(inner));
  console.log(inner);
  var children = inner[CHILDREN] || null;

  if (children) {
    for (var _iterator2 = children, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var child = _ref2;
      printDrop(child);
    }
  }

  console.groupEnd();
}

if (false
/* LOCAL_DEBUG */
&& typeof window !== 'undefined') {
  window.PRINT_DROP = printDropTree;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,