"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.strip = strip;

function strip(strings) {
  var out = '';

  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  for (var i = 0; i < strings.length; i++) {
    var string = strings[i];
    var dynamic = args[i] !== undefined ? String(args[i]) : '';
    out += "" + string + dynamic;
  }

  var lines = out.split('\n');

  while (lines.length && lines[0].match(/^\s*$/)) {
    lines.shift();
  }

  while (lines.length && lines[lines.length - 1].match(/^\s*$/)) {
    lines.pop();
  }

  var min = Infinity;

  for (var _iterator = lines, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
    var _ref;

    if (_isArray) {
      if (_i >= _iterator.length) break;
      _ref = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done) break;
      _ref = _i.value;
    }

    var line = _ref;
    var leading = line.match(/^\s*/)[0].length;
    min = Math.min(min, leading);
  }

  var stripped = [];

  for (var _iterator2 = lines, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
    var _ref2;

    if (_isArray2) {
      if (_i2 >= _iterator2.length) break;
      _ref2 = _iterator2[_i2++];
    } else {
      _i2 = _iterator2.next();
      if (_i2.done) break;
      _ref2 = _i2.value;
    }

    var _line = _ref2;
    stripped.push(_line.slice(min));
  }

  return stripped.join('\n');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3V0aWwvbGliL3N0cmluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQU0sU0FBQSxLQUFBLENBQUEsT0FBQSxFQUFpRTtBQUNyRSxNQUFJLEdBQUcsR0FBUCxFQUFBOztBQURxRSxPQUFBLElBQUEsSUFBQSxHQUFBLFNBQUEsQ0FBQSxNQUFBLEVBQWpFLElBQWlFLEdBQUEsSUFBQSxLQUFBLENBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLElBQUEsR0FBQSxDQUFBLEVBQUEsSUFBQSxHQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQTtBQUFqRSxJQUFBLElBQWlFLENBQUEsSUFBQSxHQUFBLENBQUEsQ0FBakUsR0FBaUUsU0FBQSxDQUFBLElBQUEsQ0FBakU7QUFBaUU7O0FBRXJFLE9BQUssSUFBSSxDQUFDLEdBQVYsQ0FBQSxFQUFnQixDQUFDLEdBQUcsT0FBTyxDQUEzQixNQUFBLEVBQW9DLENBQXBDLEVBQUEsRUFBeUM7QUFDdkMsUUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFwQixDQUFvQixDQUFwQjtBQUNBLFFBQUksT0FBTyxHQUFHLElBQUksQ0FBSixDQUFJLENBQUosS0FBQSxTQUFBLEdBQXdCLE1BQU0sQ0FBQyxJQUFJLENBQW5DLENBQW1DLENBQUwsQ0FBOUIsR0FBZCxFQUFBO0FBRUEsSUFBQSxHQUFHLElBQUEsS0FBQSxNQUFBLEdBQUgsT0FBQTtBQUNEOztBQUVELE1BQUksS0FBSyxHQUFHLEdBQUcsQ0FBSCxLQUFBLENBQVosSUFBWSxDQUFaOztBQUVBLFNBQU8sS0FBSyxDQUFMLE1BQUEsSUFBZ0IsS0FBSyxDQUFMLENBQUssQ0FBTCxDQUFBLEtBQUEsQ0FBdkIsT0FBdUIsQ0FBdkIsRUFBZ0Q7QUFDOUMsSUFBQSxLQUFLLENBQUwsS0FBQTtBQUNEOztBQUVELFNBQU8sS0FBSyxDQUFMLE1BQUEsSUFBZ0IsS0FBSyxDQUFDLEtBQUssQ0FBTCxNQUFBLEdBQU4sQ0FBSyxDQUFMLENBQUEsS0FBQSxDQUF2QixPQUF1QixDQUF2QixFQUErRDtBQUM3RCxJQUFBLEtBQUssQ0FBTCxHQUFBO0FBQ0Q7O0FBRUQsTUFBSSxHQUFHLEdBQVAsUUFBQTs7QUFFQSxPQUFBLElBQUEsU0FBQSxHQUFBLEtBQUEsRUFBQSxRQUFBLEdBQUEsS0FBQSxDQUFBLE9BQUEsQ0FBQSxTQUFBLENBQUEsRUFBQSxFQUFBLEdBQUEsQ0FBQSxFQUFBLFNBQUEsR0FBQSxRQUFBLEdBQUEsU0FBQSxHQUFBLFNBQUEsQ0FBQSxNQUFBLENBQUEsUUFBQSxDQUFBLEVBQUEsSUFBd0I7QUFBQSxRQUFBLElBQUE7O0FBQUEsUUFBQSxRQUFBLEVBQUE7QUFBQSxVQUFBLEVBQUEsSUFBQSxTQUFBLENBQUEsTUFBQSxFQUFBO0FBQUEsTUFBQSxJQUFBLEdBQUEsU0FBQSxDQUFBLEVBQUEsRUFBQSxDQUFBO0FBQUEsS0FBQSxNQUFBO0FBQUEsTUFBQSxFQUFBLEdBQUEsU0FBQSxDQUFBLElBQUEsRUFBQTtBQUFBLFVBQUEsRUFBQSxDQUFBLElBQUEsRUFBQTtBQUFBLE1BQUEsSUFBQSxHQUFBLEVBQUEsQ0FBQSxLQUFBO0FBQUE7O0FBQUEsUUFBeEIsSUFBd0IsR0FBQSxJQUFBO0FBQ3RCLFFBQUksT0FBTyxHQUFHLElBQUksQ0FBSixLQUFBLENBQUEsTUFBQSxFQUFBLENBQUEsRUFBZCxNQUFBO0FBRUEsSUFBQSxHQUFHLEdBQUcsSUFBSSxDQUFKLEdBQUEsQ0FBQSxHQUFBLEVBQU4sT0FBTSxDQUFOO0FBQ0Q7O0FBRUQsTUFBSSxRQUFRLEdBQVosRUFBQTs7QUFFQSxPQUFBLElBQUEsVUFBQSxHQUFBLEtBQUEsRUFBQSxTQUFBLEdBQUEsS0FBQSxDQUFBLE9BQUEsQ0FBQSxVQUFBLENBQUEsRUFBQSxHQUFBLEdBQUEsQ0FBQSxFQUFBLFVBQUEsR0FBQSxTQUFBLEdBQUEsVUFBQSxHQUFBLFVBQUEsQ0FBQSxNQUFBLENBQUEsUUFBQSxDQUFBLEVBQUEsSUFBd0I7QUFBQSxRQUFBLEtBQUE7O0FBQUEsUUFBQSxTQUFBLEVBQUE7QUFBQSxVQUFBLEdBQUEsSUFBQSxVQUFBLENBQUEsTUFBQSxFQUFBO0FBQUEsTUFBQSxLQUFBLEdBQUEsVUFBQSxDQUFBLEdBQUEsRUFBQSxDQUFBO0FBQUEsS0FBQSxNQUFBO0FBQUEsTUFBQSxHQUFBLEdBQUEsVUFBQSxDQUFBLElBQUEsRUFBQTtBQUFBLFVBQUEsR0FBQSxDQUFBLElBQUEsRUFBQTtBQUFBLE1BQUEsS0FBQSxHQUFBLEdBQUEsQ0FBQSxLQUFBO0FBQUE7O0FBQUEsUUFBeEIsS0FBd0IsR0FBQSxLQUFBO0FBQ3RCLElBQUEsUUFBUSxDQUFSLElBQUEsQ0FBYyxLQUFJLENBQUosS0FBQSxDQUFkLEdBQWMsQ0FBZDtBQUNEOztBQUVELFNBQU8sUUFBUSxDQUFSLElBQUEsQ0FBUCxJQUFPLENBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBzdHJpcChzdHJpbmdzOiBUZW1wbGF0ZVN0cmluZ3NBcnJheSwgLi4uYXJnczogdW5rbm93bltdKSB7XG4gIGxldCBvdXQgPSAnJztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IHN0cmluZyA9IHN0cmluZ3NbaV07XG4gICAgbGV0IGR5bmFtaWMgPSBhcmdzW2ldICE9PSB1bmRlZmluZWQgPyBTdHJpbmcoYXJnc1tpXSkgOiAnJztcblxuICAgIG91dCArPSBgJHtzdHJpbmd9JHtkeW5hbWljfWA7XG4gIH1cblxuICBsZXQgbGluZXMgPSBvdXQuc3BsaXQoJ1xcbicpO1xuXG4gIHdoaWxlIChsaW5lcy5sZW5ndGggJiYgbGluZXNbMF0ubWF0Y2goL15cXHMqJC8pKSB7XG4gICAgbGluZXMuc2hpZnQoKTtcbiAgfVxuXG4gIHdoaWxlIChsaW5lcy5sZW5ndGggJiYgbGluZXNbbGluZXMubGVuZ3RoIC0gMV0ubWF0Y2goL15cXHMqJC8pKSB7XG4gICAgbGluZXMucG9wKCk7XG4gIH1cblxuICBsZXQgbWluID0gSW5maW5pdHk7XG5cbiAgZm9yIChsZXQgbGluZSBvZiBsaW5lcykge1xuICAgIGxldCBsZWFkaW5nID0gbGluZS5tYXRjaCgvXlxccyovKSFbMF0ubGVuZ3RoO1xuXG4gICAgbWluID0gTWF0aC5taW4obWluLCBsZWFkaW5nKTtcbiAgfVxuXG4gIGxldCBzdHJpcHBlZCA9IFtdO1xuXG4gIGZvciAobGV0IGxpbmUgb2YgbGluZXMpIHtcbiAgICBzdHJpcHBlZC5wdXNoKGxpbmUuc2xpY2UobWluKSk7XG4gIH1cblxuICByZXR1cm4gc3RyaXBwZWQuam9pbignXFxuJyk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9