"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EMPTY_SLICE = exports.ListSlice = exports.LinkedList = exports.ListNode = void 0;

var _lifetimes = require("./lifetimes");

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var ListNode = function ListNode(value) {
  this.next = null;
  this.prev = null;
  this.value = value;
};

exports.ListNode = ListNode;

var LinkedList =
/*#__PURE__*/
function () {
  function LinkedList() {
    this.clear();
  }

  var _proto = LinkedList.prototype;

  _proto.head = function head() {
    return this._head;
  };

  _proto.tail = function tail() {
    return this._tail;
  };

  _proto.clear = function clear() {
    this._head = this._tail = null;
  };

  _proto.toArray = function toArray() {
    var out = [];
    this.forEachNode(function (n) {
      return out.push(n);
    });
    return out;
  };

  _proto.nextNode = function nextNode(node) {
    return node.next;
  };

  _proto.forEachNode = function forEachNode(callback) {
    var node = this._head;

    while (node !== null) {
      callback(node);
      node = node.next;
    }
  };

  _proto.insertBefore = function insertBefore(node, reference) {
    if (reference === void 0) {
      reference = null;
    }

    if (reference === null) return this.append(node);
    if (reference.prev) reference.prev.next = node;else this._head = node;
    node.prev = reference.prev;
    node.next = reference;
    reference.prev = node;
    return node;
  };

  _proto.append = function append(node) {
    var tail = this._tail;

    if (tail) {
      tail.next = node;
      node.prev = tail;
      node.next = null;
    } else {
      this._head = node;
    }

    return this._tail = node;
  };

  _proto.remove = function remove(node) {
    if (node.prev) node.prev.next = node.next;else this._head = node.next;
    if (node.next) node.next.prev = node.prev;else this._tail = node.prev;
    return node;
  };

  _proto[_lifetimes.WILL_DROP] = function () {
    this.forEachNode(function (d) {
      return (0, _lifetimes.destructor)(d)[_lifetimes.WILL_DROP]();
    });
  };

  _proto[_lifetimes.DID_DROP] = function () {
    this.forEachNode(function (d) {
      return (0, _lifetimes.destructor)(d)[_lifetimes.DID_DROP]();
    });
  };

  _createClass(LinkedList, [{
    key: _lifetimes.CHILDREN,
    get: function get() {
      var out = [];
      this.forEachNode(function (d) {
        return out.push.apply(out, (0, _lifetimes.destructor)(d)[_lifetimes.CHILDREN]);
      });
      return out;
    }
  }]);

  return LinkedList;
}();

exports.LinkedList = LinkedList;

var ListSlice =
/*#__PURE__*/
function () {
  function ListSlice(head, tail) {
    this._head = head;
    this._tail = tail;
  }

  var _proto2 = ListSlice.prototype;

  _proto2.forEachNode = function forEachNode(callback) {
    var node = this._head;

    while (node !== null) {
      callback(node);
      node = this.nextNode(node);
    }
  };

  _proto2.head = function head() {
    return this._head;
  };

  _proto2.tail = function tail() {
    return this._tail;
  };

  _proto2.toArray = function toArray() {
    var out = [];
    this.forEachNode(function (n) {
      return out.push(n);
    });
    return out;
  };

  _proto2.nextNode = function nextNode(node) {
    if (node === this._tail) return null;
    return node.next;
  };

  return ListSlice;
}();

exports.ListSlice = ListSlice;
var EMPTY_SLICE = new ListSlice(null, null);
exports.EMPTY_SLICE = EMPTY_SLICE;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,