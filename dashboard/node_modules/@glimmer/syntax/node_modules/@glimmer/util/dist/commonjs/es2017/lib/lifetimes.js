"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isDrop = isDrop;
exports.associate = associate;
exports.associateDestructor = associateDestructor;
exports.peekAssociated = peekAssociated;
exports.takeAssociated = takeAssociated;
exports.willDestroyAssociated = willDestroyAssociated;
exports.didDestroyAssociated = didDestroyAssociated;
exports.destructor = destructor;
exports.snapshot = snapshot;
exports.debugDropTree = debugDropTree;
exports.printDropTree = printDropTree;
exports.printDrop = printDrop;
exports.ListContentsDestructor = exports.DESTRUCTORS = exports.CHILDREN = exports.DID_DROP = exports.WILL_DROP = exports.LINKED = void 0;

var _destroy = require("./destroy");

var _platformUtils = require("./platform-utils");

const LINKED = new WeakMap();
exports.LINKED = LINKED;
const WILL_DROP = (0, _platformUtils.symbol)('WILL_DROP');
exports.WILL_DROP = WILL_DROP;
const DID_DROP = (0, _platformUtils.symbol)('DID_DROP');
exports.DID_DROP = DID_DROP;
const CHILDREN = (0, _platformUtils.symbol)('CHILDREN');
exports.CHILDREN = CHILDREN;
const DESTRUCTORS = new WeakMap();
exports.DESTRUCTORS = DESTRUCTORS;

function isDrop(value) {
  if (value === null || typeof value !== 'object') return false;
  return value[DID_DROP] !== undefined;
}

function associate(parent, child) {
  associateDestructor(parent, destructor(child));
}

function associateDestructor(parent, child) {
  let associated = LINKED.get(parent);

  if (!associated) {
    associated = new Set();
    LINKED.set(parent, associated);
  }

  associated.add(child);
}

function peekAssociated(parent) {
  return LINKED.get(parent) || null;
}

function takeAssociated(parent) {
  let linked = LINKED.get(parent);

  if (linked && linked.size > 0) {
    LINKED.delete(parent);
    return linked;
  } else {
    return null;
  }
}

function willDestroyAssociated(parent) {
  let associated = LINKED.get(parent);

  if (associated) {
    associated.forEach(item => {
      item[WILL_DROP]();
    });
  }
}

function didDestroyAssociated(parent) {
  let associated = LINKED.get(parent);

  if (associated) {
    associated.forEach(item => {
      item[DID_DROP]();
      associated.delete(item);
    });
  }
}

function destructor(value) {
  let d = DESTRUCTORS.get(value);

  if (!d) {
    if ((0, _destroy.isDestroyable)(value)) {
      d = new DestroyableDestructor(value);
    } else if ((0, _destroy.isStringDestroyable)(value)) {
      d = new StringDestroyableDestructor(value);
    } else {
      d = new SimpleDestructor(value);
    }

    DESTRUCTORS.set(value, d);
  }

  return d;
}

function snapshot(values) {
  return new SnapshotDestructor(values);
}

class SnapshotDestructor {
  constructor(destructors) {
    this.destructors = destructors;
  }

  [WILL_DROP]() {
    this.destructors.forEach(item => item[WILL_DROP]());
  }

  [DID_DROP]() {
    this.destructors.forEach(item => item[DID_DROP]());
  }

  get [CHILDREN]() {
    return this.destructors;
  }

  toString() {
    return 'SnapshotDestructor';
  }

}

class DestroyableDestructor {
  constructor(inner) {
    this.inner = inner;
  }

  [WILL_DROP]() {
    willDestroyAssociated(this.inner);
  }

  [DID_DROP]() {
    this.inner[_destroy.DESTROY]();

    didDestroyAssociated(this.inner);
  }

  get [CHILDREN]() {
    return LINKED.get(this.inner) || [];
  }

  toString() {
    return 'DestroyableDestructor';
  }

}

class StringDestroyableDestructor {
  constructor(inner) {
    this.inner = inner;
  }

  [WILL_DROP]() {
    if (typeof this.inner.willDestroy === 'function') {
      this.inner.willDestroy();
    }

    willDestroyAssociated(this.inner);
  }

  [DID_DROP]() {
    this.inner.destroy();
    didDestroyAssociated(this.inner);
  }

  get [CHILDREN]() {
    return LINKED.get(this.inner) || [];
  }

  toString() {
    return 'StringDestroyableDestructor';
  }

}

class SimpleDestructor {
  constructor(inner) {
    this.inner = inner;
  }

  [WILL_DROP]() {
    willDestroyAssociated(this.inner);
  }

  [DID_DROP]() {
    didDestroyAssociated(this.inner);
  }

  get [CHILDREN]() {
    return LINKED.get(this.inner) || [];
  }

  toString() {
    return 'SimpleDestructor';
  }

}

class ListContentsDestructor {
  constructor(inner) {
    this.inner = inner;
  }

  [WILL_DROP]() {
    this.inner.forEachNode(d => destructor(d)[WILL_DROP]());
  }

  [DID_DROP]() {
    this.inner.forEachNode(d => destructor(d)[DID_DROP]());
  }

  get [CHILDREN]() {
    let out = [];
    this.inner.forEachNode(d => out.push(...destructor(d)[CHILDREN]));
    return out;
  }

  toString() {
    return 'ListContentsDestructor';
  }

}

exports.ListContentsDestructor = ListContentsDestructor;

function debugDropTree(inner) {
  let hasDrop = isDrop(inner);
  let rawChildren = LINKED.get(inner) || null;
  let children = null;

  if (rawChildren) {
    children = [];

    for (let child of rawChildren) {
      children.push(debugDropTree(child));
    }
  }

  let obj = Object.create(null);
  obj.inner = inner;

  if (children) {
    obj.children = children;
  }

  obj.hasDrop = hasDrop;
  return obj;
}

function printDropTree(inner) {
  printDrop(destructor(inner));
}

function printDrop(inner) {
  console.group(String(inner));
  console.log(inner);
  let children = inner[CHILDREN] || null;

  if (children) {
    for (let child of children) {
      printDrop(child);
    }
  }

  console.groupEnd();
}

if (false
/* LOCAL_DEBUG */
&& typeof window !== 'undefined') {
  window.PRINT_DROP = printDropTree;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,