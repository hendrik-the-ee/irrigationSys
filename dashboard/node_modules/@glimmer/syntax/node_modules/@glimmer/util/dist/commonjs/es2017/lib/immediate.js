"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.encodeImmediate = encodeImmediate;
exports.decodeImmediate = decodeImmediate;
exports.isSmallInt = isSmallInt;
exports.isHandle = isHandle;
exports.encodeHandle = encodeHandle;
exports.decodeHandle = decodeHandle;

var _platformUtils = require("./platform-utils");

let checkInt;

if (false
/* LOCAL_DEBUG */
) {
    // eslint-disable-next-line no-var,vars-on-top
    checkInt = (num, min = -2147483648, max = 2147483647) => {
      if (!isInt(num, min, max)) {
        throw new Error(`expected ${num} to be an integer between ${min} to ${max}`);
      }
    };
  }
/**
 * Encodes a value that can be stored directly instead of being a handle.
 *
 * Immediates use the positive half of 32bits
 *
 * @param value - the value to be encoded.
 */


function encodeImmediate(value) {
  if (typeof value === 'number') {
    if (false
    /* LOCAL_DEBUG */
    ) {
        checkInt(value, -1073741820
        /* MIN_INT */
        , 1073741823
        /* MAX_INT */
        );
      } // map -1 to -1073741820 onto 1073741828 to 2147483647
    // 1073741827 - (-1) == 1073741828
    // 1073741827 - (-1073741820) == 2147483647
    // positive it stays as is
    // 0 - 1073741823


    return value < 0 ? 1073741827
    /* NEGATIVE_BASE */
    - value : value;
  }

  if (value === false) {
    return 1073741824
    /* FALSE */
    ;
  }

  if (value === true) {
    return 1073741825
    /* TRUE */
    ;
  }

  if (value === null) {
    return 1073741826
    /* NULL */
    ;
  }

  if (value === undefined) {
    return 1073741827
    /* UNDEFINED */
    ;
  }

  return (0, _platformUtils.exhausted)(value);
}
/**
 * Decodes an immediate into its value.
 *
 * @param value - the encoded immediate value
 */


function decodeImmediate(value) {
  if (false
  /* LOCAL_DEBUG */
  ) {
      // expected value to be checked before this
      checkInt(value, 0
      /* MIN_IMMEDIATE */
      , 2147483647
      /* MAX_IMMEDIATE */
      );
    }

  if (value > 1073741823
  /* MAX_INT */
  ) {
      switch (value) {
        case 1073741824
        /* FALSE */
        :
          return false;

        case 1073741825
        /* TRUE */
        :
          return true;

        case 1073741826
        /* NULL */
        :
          return null;

        case 1073741827
        /* UNDEFINED */
        :
          return undefined;

        default:
          // map 1073741828 to 2147483647 to -1 to -1073741820
          // 1073741827 - 1073741828 == -1
          // 1073741827 - 2147483647 == -1073741820
          return 1073741827
          /* NEGATIVE_BASE */
          - value;
      }
    }

  return value;
}
/**
 * True if the number can be stored directly or false if it needs a handle.
 *
 * This is used on any number type to see if it can be directly encoded.
 */


function isSmallInt(num) {
  return isInt(num, -1073741820
  /* MIN_INT */
  , 1073741823
  /* MAX_INT */
  );
}
/**
 * True if the encoded int32 operand or encoded stack int32 is a handle.
 */


function isHandle(encoded) {
  if (false
  /* LOCAL_DEBUG */
  ) {
      // we expect to only use this method when we already know it is an int32
      // because it was encoded or read from the Int32Array buffer
      checkInt(encoded);
    }

  return encoded < 0;
}
/**
 * Encodes an index to an operand or stack handle.
 */


function encodeHandle(index, maxIndex = 2147483647
/* MAX_INDEX */
, maxHandle = -1
/* MAX_HANDLE */
) {
  if (false
  /* LOCAL_DEBUG */
  ) {
      // expected the index to already be a positive int index from pushing the value
      checkInt(index, 0);
    }

  if (index > maxIndex) {
    throw new Error(`index ${index} overflowed range 0 to ${maxIndex}`);
  } // -1 - 0 == -1
  // -1 - 1073741823 == -1073741824
  // -1073741825 - 0 == -1073741825
  // -1073741825 - 1073741823 == -2147483648


  return maxHandle - index;
}
/**
 * Decodes the index from the specified operand or stack handle.
 */


function decodeHandle(handle, maxHandle = -1
/* MAX_HANDLE */
) {
  if (false
  /* LOCAL_DEBUG */
  ) {
      // we expect to be decoding a encoded int32 operand or encoded int32 on the stack
      checkInt(handle, -2147483648
      /* MIN_HANDLE */
      , maxHandle);
    } // -1 - -1 == 0
  // -1 - -1073741824 == 1073741823
  // -1073741825 - -1073741825 == 0
  // -1073741825 - -2147483648 == 1073741823


  return maxHandle - handle;
}

function isInt(num, min, max) {
  // this is the same as Math.floor(num) === num
  // also NaN % 1 is NaN and Infinity % 1 is NaN so both should fail
  return num % 1 === 0 && num >= min && num <= max;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,