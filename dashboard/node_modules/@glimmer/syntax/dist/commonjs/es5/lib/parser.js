"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Parser = void 0;

var _simpleHtmlTokenizer = require("simple-html-tokenizer");

var _util = require("@glimmer/util");

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var Parser =
/*#__PURE__*/
function () {
  function Parser(source, entityParser) {
    if (entityParser === void 0) {
      entityParser = new _simpleHtmlTokenizer.EntityParser(_simpleHtmlTokenizer.HTML5NamedCharRefs);
    }

    this.elementStack = [];
    this.currentAttribute = null;
    this.currentNode = null;
    this.source = source.split(/(?:\r\n?|\n)/g);
    this.tokenizer = new _simpleHtmlTokenizer.EventedTokenizer(this, entityParser);
  }

  var _proto = Parser.prototype;

  _proto.acceptTemplate = function acceptTemplate(node) {
    return this[node.type](node);
  };

  _proto.acceptNode = function acceptNode(node) {
    return this[node.type](node);
  };

  _proto.currentElement = function currentElement() {
    return this.elementStack[this.elementStack.length - 1];
  };

  _proto.sourceForNode = function sourceForNode(node, endNode) {
    var firstLine = node.loc.start.line - 1;
    var currentLine = firstLine - 1;
    var firstColumn = node.loc.start.column;
    var string = [];
    var line;
    var lastLine;
    var lastColumn;

    if (endNode) {
      lastLine = endNode.loc.end.line - 1;
      lastColumn = endNode.loc.end.column;
    } else {
      lastLine = node.loc.end.line - 1;
      lastColumn = node.loc.end.column;
    }

    while (currentLine < lastLine) {
      currentLine++;
      line = this.source[currentLine];

      if (currentLine === firstLine) {
        if (firstLine === lastLine) {
          string.push(line.slice(firstColumn, lastColumn));
        } else {
          string.push(line.slice(firstColumn));
        }
      } else if (currentLine === lastLine) {
        string.push(line.slice(0, lastColumn));
      } else {
        string.push(line);
      }
    }

    return string.join('\n');
  };

  _createClass(Parser, [{
    key: "currentAttr",
    get: function get() {
      return this.currentAttribute;
    }
  }, {
    key: "currentTag",
    get: function get() {
      var node = this.currentNode;
      false && (0, _util.assert)(node && (node.type === 'StartTag' || node.type === 'EndTag'), 'expected tag');
      return node;
    }
  }, {
    key: "currentStartTag",
    get: function get() {
      var node = this.currentNode;
      false && (0, _util.assert)(node && node.type === 'StartTag', 'expected start tag');
      return node;
    }
  }, {
    key: "currentEndTag",
    get: function get() {
      var node = this.currentNode;
      false && (0, _util.assert)(node && node.type === 'EndTag', 'expected end tag');
      return node;
    }
  }, {
    key: "currentComment",
    get: function get() {
      var node = this.currentNode;
      false && (0, _util.assert)(node && node.type === 'CommentStatement', 'expected a comment');
      return node;
    }
  }, {
    key: "currentData",
    get: function get() {
      var node = this.currentNode;
      false && (0, _util.assert)(node && node.type === 'TextNode', 'expected a text node');
      return node;
    }
  }]);

  return Parser;
}();

exports.Parser = Parser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,