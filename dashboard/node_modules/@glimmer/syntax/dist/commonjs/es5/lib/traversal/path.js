"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var Path =
/*#__PURE__*/
function () {
  function Path(node, parent, parentKey) {
    if (parent === void 0) {
      parent = null;
    }

    if (parentKey === void 0) {
      parentKey = null;
    }

    this.node = node;
    this.parent = parent;
    this.parentKey = parentKey;
  }

  var _proto = Path.prototype;

  _proto.parents = function parents() {
    var _this = this,
        _ref;

    return _ref = {}, _ref[Symbol.iterator] = function () {
      return new PathParentsIterator(_this);
    }, _ref;
  };

  _createClass(Path, [{
    key: "parentNode",
    get: function get() {
      return this.parent ? this.parent.node : null;
    }
  }]);

  return Path;
}();

exports.default = Path;

var PathParentsIterator =
/*#__PURE__*/
function () {
  function PathParentsIterator(path) {
    this.path = path;
  }

  var _proto2 = PathParentsIterator.prototype;

  _proto2.next = function next() {
    if (this.path.parent) {
      this.path = this.path.parent;
      return {
        done: false,
        value: this.path
      };
    } else {
      return {
        done: true,
        value: null
      };
    }
  };

  return PathParentsIterator;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3N5bnRheC9saWIvdHJhdmVyc2FsL3BhdGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFFYyxJOzs7QUFLWixXQUFBLElBQUEsQ0FBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLFNBQUEsRUFBc0Y7QUFBQSxRQUFqRSxNQUFpRSxLQUFBLEtBQUEsQ0FBQSxFQUFBO0FBQWpFLE1BQUEsTUFBaUUsR0FBdEYsSUFBcUI7QUFBaUU7O0FBQUEsUUFBL0IsU0FBK0IsS0FBQSxLQUFBLENBQUEsRUFBQTtBQUEvQixNQUFBLFNBQStCLEdBQXRGLElBQXVEO0FBQStCOztBQUNwRixTQUFBLElBQUEsR0FBQSxJQUFBO0FBQ0EsU0FBQSxNQUFBLEdBQUEsTUFBQTtBQUNBLFNBQUEsU0FBQSxHQUFBLFNBQUE7QUFDRDs7OztTQU1ELE8sR0FBQSxTQUFBLE9BQUEsR0FBTztBQUFBLFFBQUEsS0FBQSxHQUFBLElBQUE7QUFBQSxRQUFBLElBQUE7O0FBQ0wsV0FBQSxJQUFBLEdBQUEsRUFBQSxFQUFBLElBQUEsQ0FDRyxNQUFNLENBRFQsUUFBQSxDQUFBLEdBQ3FCLFlBQUs7QUFDdEIsYUFBTyxJQUFBLG1CQUFBLENBQVAsS0FBTyxDQUFQO0FBRkosS0FBQSxFQUFBLElBQUE7Ozs7O3dCQUxZO0FBQ1osYUFBTyxLQUFBLE1BQUEsR0FBYyxLQUFBLE1BQUEsQ0FBZCxJQUFBLEdBQVAsSUFBQTtBQUNEOzs7Ozs7OztJQVdILG1COzs7QUFHRSxXQUFBLG1CQUFBLENBQUEsSUFBQSxFQUE0QjtBQUMxQixTQUFBLElBQUEsR0FBQSxJQUFBO0FBQ0Q7Ozs7VUFFRCxJLEdBQUEsU0FBQSxJQUFBLEdBQUk7QUFDRixRQUFJLEtBQUEsSUFBQSxDQUFKLE1BQUEsRUFBc0I7QUFDcEIsV0FBQSxJQUFBLEdBQVksS0FBQSxJQUFBLENBQVosTUFBQTtBQUNBLGFBQU87QUFBRSxRQUFBLElBQUksRUFBTixLQUFBO0FBQWUsUUFBQSxLQUFLLEVBQUUsS0FBSztBQUEzQixPQUFQO0FBRkYsS0FBQSxNQUdPO0FBQ0wsYUFBTztBQUFFLFFBQUEsSUFBSSxFQUFOLElBQUE7QUFBYyxRQUFBLEtBQUssRUFBRTtBQUFyQixPQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vdHlwZXMvbm9kZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXRoPE4gZXh0ZW5kcyBOb2RlPiB7XG4gIG5vZGU6IE47XG4gIHBhcmVudDogUGF0aDxOb2RlPiB8IG51bGw7XG4gIHBhcmVudEtleTogc3RyaW5nIHwgbnVsbDtcblxuICBjb25zdHJ1Y3Rvcihub2RlOiBOLCBwYXJlbnQ6IFBhdGg8Tm9kZT4gfCBudWxsID0gbnVsbCwgcGFyZW50S2V5OiBzdHJpbmcgfCBudWxsID0gbnVsbCkge1xuICAgIHRoaXMubm9kZSA9IG5vZGU7XG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgdGhpcy5wYXJlbnRLZXkgPSBwYXJlbnRLZXk7XG4gIH1cblxuICBnZXQgcGFyZW50Tm9kZSgpOiBOb2RlIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMucGFyZW50ID8gdGhpcy5wYXJlbnQubm9kZSA6IG51bGw7XG4gIH1cblxuICBwYXJlbnRzKCk6IEl0ZXJhYmxlPFBhdGg8Tm9kZT4gfCBudWxsPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFtTeW1ib2wuaXRlcmF0b3JdOiAoKSA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgUGF0aFBhcmVudHNJdGVyYXRvcih0aGlzKTtcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxufVxuXG5jbGFzcyBQYXRoUGFyZW50c0l0ZXJhdG9yIGltcGxlbWVudHMgSXRlcmF0b3I8UGF0aDxOb2RlPiB8IG51bGw+IHtcbiAgcGF0aDogUGF0aDxOb2RlPjtcblxuICBjb25zdHJ1Y3RvcihwYXRoOiBQYXRoPE5vZGU+KSB7XG4gICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgfVxuXG4gIG5leHQoKSB7XG4gICAgaWYgKHRoaXMucGF0aC5wYXJlbnQpIHtcbiAgICAgIHRoaXMucGF0aCA9IHRoaXMucGF0aC5wYXJlbnQ7XG4gICAgICByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IHRoaXMucGF0aCB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbnVsbCB9O1xuICAgIH1cbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==